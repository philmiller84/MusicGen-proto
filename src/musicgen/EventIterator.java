package musicgen;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : MusicGen
//  @ File Name : EventIterator.java
//  @ Date : 6/24/2014
//  @ Author : Phil
//
//


public class EventIterator {
	
    private Event currentEvent;
    private EventLine eventLine;
    
    public EventIterator(EventLine eventLine)
    {
        this.eventLine = eventLine;
    }
    
    public Event FindEvent(Event event){

        // THIS SHOULD BE MOVED TO AN INNER CLASS, PROBABLY STORAGE. 
        // KEEPING HERE FOR SAKE OF GETTING UP AND RUNNING QUICK. 
        // MOVE IT WHEN THERE IS TIME!

        boolean foundIt = false;
        Event searchEvent = null;
    
        if(event != null)
        {
            searchEvent = eventLine.GetFirstEvent();
            EventNode searchEventNode  = null;
            
            while((searchEvent != null) && (foundIt == false))
            {
                if(searchEvent == event)
                {
                    foundIt = true;
                }
                else
                {
                    searchEventNode = searchEvent.GetContainingNode();
                    
                    searchEventNode = searchEventNode.GetNextNode();
                    searchEvent = searchEventNode.GetEvent();
                }
            }
        }

        currentEvent = searchEvent;
        return searchEvent;
    }
    
        
    public void AddEventAtPosition(Event e, PositionType positionType) {
        
        if ((positionType == PositionType.AFTER) ||
                positionType == PositionType.BEFORE)
        {
            if(currentEvent != null)
            {
                eventLine.InsertRelative(e, currentEvent, positionType);
            }
            else
            {
                //error. WHAT TO DO? Will want to see this fail in testing,
                // but then what use cases would want this to do something?
            }
        }
        else if ((positionType == PositionType.BEGINNING) ||
                positionType == PositionType.END)
        {
            eventLine.InsertIrrelative(e, positionType);
        }
    }
	
    public void SetCurrent(Event e){
        
        this.currentEvent = e;
    }
    
    public Event GetCurrent(){
        
        return this.currentEvent;
    }
    
    public Event GetByPositionType(PositionType positionType)
    {
        Event searchEvent = null;
        switch(positionType)
        {
            case BEGINNING:
                searchEvent = First();
                break;
            case END:
                searchEvent = Last();
                break;
            case PREV:
            case BEFORE:
                searchEvent = Prev(); 
                break;
            case NEXT:
            case AFTER:
                searchEvent = Next();
                break;
        }
        return searchEvent;
    }
    
    public Event First(){
        if(eventLine != null)
        {
            currentEvent = eventLine.GetFirstEvent();
        }
        return currentEvent;
    }
    
    public Event Last(){
        if(eventLine != null)
        {
            currentEvent = eventLine.GetLastEvent();
        }
        return currentEvent;
    }
    
    public Event Next() {

        if(currentEvent != null)
        {
            EventNode currentEventNode = currentEvent.GetContainingNode();
            EventNode nextEventNode = currentEventNode.GetNextNode();

            if(nextEventNode != null)
                currentEvent = nextEventNode.GetEvent();
            else
                currentEvent = null;
        }
        return currentEvent;
    }
	
    public Event Prev() {
        
        if(currentEvent != null)
        {
            EventNode currentEventNode = currentEvent.GetContainingNode();
            EventNode prevEventNode = currentEventNode.GetPrevNode();
        
            if(prevEventNode != null)
                currentEvent = prevEventNode.GetEvent();
            else
                currentEvent = null;
        }
        return currentEvent;
    }
    
}
