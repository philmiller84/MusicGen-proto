package musicgen;

import static musicgen.PositionType.*;


//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : MusicGen
//  @ File Name : EventIterator.java
//  @ Date : 6/24/2014
//  @ Author : Phil
//
//


public class EventIterator {
	
    private Event currentEvent;
    private EventLine eventLine;
    private AggregateLine aggregateLine;
    
    public EventIterator(EventLine eventLine)
    {
        this.eventLine = eventLine;
    }
    
    public Event FindEvent(Event event){

        // THIS SHOULD BE MOVED TO AN INNER CLASS, PROBABLY STORAGE. 
        // KEEPING HERE FOR SAKE OF GETTING UP AND RUNNING QUICK. 
        // MOVE IT WHEN THERE IS TIME!

        boolean foundIt = false;
        Event searchEvent = null;
    
        if(event != null)
        {
            searchEvent = eventLine.GetFirstEvent();
            EventNode searchEventNode  = null;
            
            while((searchEvent != null) && (foundIt == false))
            {
                if(searchEvent == event)
                {
                    foundIt = true;
                }
                else
                {
                    searchEventNode = searchEvent.GetContainingNode();
                    
                    searchEventNode = searchEventNode.GetNextNode();
                    searchEvent = searchEventNode.GetEvent();
                }
            }
        }

//        currentEvent = searchEvent;
        return searchEvent;
    }
    
    
    public Event FindCorrespondingEvent(Event event){

        boolean foundIt = false;
        Event searchEvent = null;
    
        if(event != null)
        {
            searchEvent = eventLine.GetFirstEvent();
            EventNode searchEventNode  = null;
            
            while((searchEvent != null) && (foundIt == false))
            {
                if(searchEvent.HasReferenceToEvent(event))
                {
                    foundIt = true;
                }
                else
                {
                    searchEventNode = searchEvent.GetContainingNode();
                    
                    searchEventNode = searchEventNode.GetNextNode();
                    searchEvent = searchEventNode.GetEvent();
                }
            }
        }

//        currentEvent = searchEvent;
        return searchEvent;
    }
    
    /**
     * CreateEventAtPosition creates the event in the event line, 
     * then adds it to the aggregate line for positioning
     * 
     * This is the method that should be used by the client, whereas Add is to
     * be used for internal data structure operation
     * 
     * @param e
     * @param positionType
     */
    public void CreateEventAtPosition(Event e, PositionType positionType) {
        
        //get aggregate line reference
        AggregateLine aggrLineRef = eventLine.GetAggregateLine();
        
        if ((positionType == AFTER) || 
                (positionType == BEFORE) ||
                (positionType == AT))
        {
            if(currentEvent != null)
            {
                eventLine.InsertRelative(e, currentEvent, positionType);

                //find location in aggregate
                EventIterator aggrIter;
                Event searchEvent;

                aggrIter = aggrLineRef.GetEventIterator();
                searchEvent = aggrIter.FindCorrespondingEvent(currentEvent);
                
                if(searchEvent != null)
                {
                    //call Add on aggregate
                    aggrIter.SetCurrent(searchEvent);
                    if(positionType == AT)
                    {
                        //add reference to current event
                        searchEvent.AddReferenceToEvent(e);
                    }   
                    if((positionType == AFTER)||
                            (positionType == BEFORE))
                    {
                        //create new aggregate
                        AggregateEvent newAggrEvent = new AggregateEvent(e);
                        aggrIter.AddEventAtPosition(newAggrEvent, positionType);
                    }
                }
            }
            else
            {
                //error. WHAT TO DO? Will want to see this fail in testing,
                // but then what use cases would want this to do something?
            }
        }
        else if ((positionType == BEGINNING) || positionType == END)
        {
            eventLine.InsertIrrelative(e, positionType);
            AggregateEvent newAggrEvent = new AggregateEvent(e);
            aggrLineRef.InsertIrrelative(newAggrEvent, positionType);
            
        }
    }
        
    public void AddEventAtPosition(Event e, PositionType positionType) {
        
        if ((positionType == AFTER) || positionType == BEFORE)
        {
            if(currentEvent != null)
            {
                eventLine.InsertRelative(e, currentEvent, positionType);
            }
            else
            {
                //error. WHAT TO DO? Will want to see this fail in testing,
                // but then what use cases would want this to do something?
            }
        }
        else if ((positionType == BEGINNING) || positionType == END)
        {
            eventLine.InsertIrrelative(e, positionType);
        }
        
    }
	
    public void SetCurrent(Event e){
        
        this.currentEvent = e;
    }
    
    public Event GetCurrent(){
        
        return this.currentEvent;
    }
    
    public Event GetByPositionType(PositionType positionType)
    {
        Event searchEvent = null;
        switch(positionType)
        {
            case BEGINNING:
                searchEvent = First();
                break;
            case END:
                searchEvent = Last();
                break;
            case PREV:
            case BEFORE:
                searchEvent = Prev(); 
                break;
            case NEXT:
            case AFTER:
                searchEvent = Next();
                break;
        }
        return searchEvent;
    }
    
    public Event First(){
        if(eventLine != null)
        {
            currentEvent = eventLine.GetFirstEvent();
        }
        return currentEvent;
    }
    
    public Event Last(){
        if(eventLine != null)
        {
            currentEvent = eventLine.GetLastEvent();
        }
        return currentEvent;
    }
    
    public Event Next() {

        if(currentEvent != null)
        {
            EventNode currentEventNode = currentEvent.GetContainingNode();
            EventNode nextEventNode = currentEventNode.GetNextNode();

            if(nextEventNode != null)
                currentEvent = nextEventNode.GetEvent();
            else
                currentEvent = null;
        }
        return currentEvent;
    }
	
    public Event Prev() {
        
        if(currentEvent != null)
        {
            EventNode currentEventNode = currentEvent.GetContainingNode();
            EventNode prevEventNode = currentEventNode.GetPrevNode();
        
            if(prevEventNode != null)
                currentEvent = prevEventNode.GetEvent();
            else
                currentEvent = null;
        }
        return currentEvent;
    }
    
}
